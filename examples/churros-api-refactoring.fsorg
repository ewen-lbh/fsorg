ROOT /mnt/datacore/projects/centraverse/packages/api

new-src {
    WRITE index.ts {
        // barrel
    }
    PUT scripts/post-build.ts AS post-build.ts
    PUT src/schema.ts AS schema.ts 
    server {
        # include websocket in yoga?
        WRITE index.ts {
            // barrel
        }
        WRITE yoga.ts {
            // from old index.ts
        }
        WRITE lydia.ts {
            // from old index.ts
        }
        WRITE oauth.ts {
            // from old index.ts
        }
        WRITE storage.ts {
            // from old index.ts
        }
        WRITE maintenance.ts {
            // from old index.ts
        }
        WRITE pdf.ts {
            // from old index.ts
        }
        WRITE log.ts {
            // from old index.ts
        }
    }
    lib {
        RUN cp $SRC/lib/* .
        RUN cp $SRC/*.ts .
        RUN cp $SRC/*.sql .
    }
    modules {
        announcements {
            PUT src/objects/announcements.ts AS old.ts
            WRITE README.md {
                Announcements
                =============

                Annonces effectuées par les administrateur·ice·s de l'application.
                À afficher à tout le monde (connecté ou non) de manière visible au travers de toute l'application.
            }
            WRITE index.ts {
                // Barrel file
            }
            WRITE types/announcement.ts {
                // from old.ts
            }
            resolvers {
                WRITE query.announcement.ts {
                    // from old.ts
                }
                WRITE query.announcements.ts {
                    // from old.ts
                }
                WRITE query.announcements-now.ts {
                    // from old.ts
                }
                WRITE mutation.upsert-announcement.ts {
                    // from old.ts
                }
                WRITE mutation.delete-announcement.ts {
                    // from old.ts
                }
            }
            permissions {
                WRITE announcement.ts {
                    export const userCanEditAnnouncements = (user: undefined | {admin: boolean}): boolean =>
                        user?.admin
                }
            }
        }
        posts {
            PUT src/objects/articles.ts AS old.ts
            WRITE README.md {
                Posts
                =====

                Appelés _Articles_ dans le code pour des soucis de rétro-compabilité.
                Sera renommé en _Post_ partout dans le futur.

                Représente les différents posts publiés par les différents [groupes](../groups)
            }
            WRITE index.ts {
                // Barrel file
            }
            WRITE types/article.ts {
                // from old.ts
            }
            resolvers {
                WRITE query.article.ts {
                    // from old.ts
                }
                WRITE query.homepage.ts {
                    // TODO rename to articles
                    // from old.ts
                }
                WRITE query.search-articles.ts {
                    // from old.ts maybe??
                }
                WRITE mutation.upsert-article.ts {
                    // from old.ts
                }
                WRITE mutation.delete-article.ts {
                    // from old.ts
                }
                WRITE group.articles.ts {
                    // TODO
                }
                WRITE group.articles.ts {
                    // TODO
                }
            }
            permissions {
                WRITE article.ts {
                    // from old.ts
                }
            }
        }
        bar-weeks {
            PUT src/objects/bar-week.ts AS old.ts
            WRITE README.md {
                Semaines de bar
                ===============

                Spécifique à l'AEn7, représente une semaine où un club organise des activités et staff pour le bar du Foyer.
                Les personnes ayant la permissions d'en créer sont les administrateur·ice·s, responsables des clubs (permission `canEditGroups`) et membres du bureau du Foyer (configurés avec la variable d'environnement `FOY_GROUPS`, liste séparée par des virgules d'uids de groupes)
            }
            WRITE index.ts {
                // Barrel file
            }
            WRITE types/bar-week.ts {
                // from old.ts
            }
            resolvers {
                WRITE query.bar-week.ts {
                    // from old.ts
                }
                WRITE query.bar-week-now.ts {
                    // from old.ts
                }
                WRITE query.bar-weeks.ts {
                    // from old.ts
                }
                WRITE mutation.upsert-bar-week.ts {
                    // from old.ts
                }
                WRITE mutation.delete-bar-week.ts {
                    // from old.ts
                }
                WRITE group.bar-weeks.ts {
                    // TODO
                }
            }
            permissions {
                WRITE bar-week.ts {
                    export const userCanEditBarWeeks = (user: User): boolean =>
                        user?.admin || user?.canEditGroups || (process.env.FOY_GROUPS?.split(',') ?? []).some(uid => userIsOnBoardOf(uid, user))
                    

                    export const userCanSeeBarWeek = (user: User, group: Group): boolean  =>
                        userIsStudentOfSchool(user, group.school.uid)
                    
                }
            }
        }
        changelogs {
            PUT src/services/changelogs.ts AS old.ts
            WRITE README.md {
                Changelogs
                ==========

                Représente les différents "changelogs", c'est à dire l'historique des versions de l'application.
                Les changelogs représentent les changements dans l'application web officielle également, et ne sépare pas les changements de l'API seul de ceux concernant l'application web.
            }

            WRITE index.ts {
                // Barrel file
            }
            types {
                WRITE changelog-release.ts {
                    // from old.ts
                }
                WRITE release-changes-map.ts {
                    // from old.ts
                }
                WRITE release-change.ts {
                    // from old.ts
                }
            }
            resolvers {
                WRITE query.changelog.ts {
                    // from old.ts
                }
                WRITE query.combined-changelog.ts {
                    // from old.ts
                }
                WRITE query.upcoming-changelog.ts {
                    // from old.ts
                }
            }
            permissions {
                # empty, for now
            }
        }
        comments {
            PUT src/objects/comments.ts AS old.ts
            WRITE README.md {
                Comments
                ========

                Représente les différents commentaires postés.
                Les commentaires peuvent être reliés à des [posts](../posts) ou des [documents](../documents)
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE comment.ts {
                    // from old.ts
                }
            }

            resolvers {
                WRITE query.comment.ts {
                    // from old.ts
                }
                WRITE query.comments.ts {
                    // from old.ts
                }
                WRITE mutation.upsert-comment.ts {
                    // from old.ts
                }
                WRITE mutation.delete-comment.ts {
                    // from old.ts
                }
                WRITE post.comments.ts {
                    // TODO
                }
                WRITE document.comments.ts {
                    // TODO
                }
                WRITE comment.replies.ts {
                    // TODO
                }
            }
        }
        # includes user candidates, credentials
        users {
            PUT src/objects/users.ts AS old.ts
            WRITE README.md {
                Users
                =====

                Représente les personnes utilisant l'application.

                Inscription
                -----------

                L'Inscription se fait en deux ou trois parties: la première consiste à donner simplement une adresse e-mail et à la valider.
                Ensuite, on rentre le reste des informations.
                Enfin, si la personne déclare appartenir à une école mais que l'e-mail n'est pas dans le domaine de l'école (ce qui prouve automatiquement que la personne est étudiante), il faut qu'n admin confirme manuellement.

                Ce n'est qu'après cette validation (quand elle est nécéssaire) que l'objet `UserCandidate` est tranformé en `User`.

                Connexion
                ---------

                La mutation `login` permet la connexion.
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE user.ts {
                    // from old.ts
                }
                PUT src/objects/user-candidates.ts AS old-user-candidates.ts
                WRITE user-candidate.ts {
                    // from ./old-user-candidates.ts
                }
                PUT src/objects/credentials.ts AS old-credentials.ts
                WRITE credential.ts {
                    // from ./old-credentials.ts
                    // TODO rename to Token (password are not exposed in the API anyway)
                }
            }

            resolvers {
                WRITE query.user.ts {
                    // from old.ts
                    // also userByEmail (combine into a single query)
                }
                WRITE query.users.ts {
                    // from old.ts
                }
                WRITE query.search-users.ts {
                    // from old.ts
                }
                WRITE query.user-candidates.ts {
                    // from old.ts
                }
                WRITE query.user-candidate.ts {
                    // from old.ts
                    // also userCandidateByEmail (combine into a single query)
                }
                WRITE mutation.login.ts {
                    // from old.ts
                }
                WRITE mutation.logout.ts {
                    // from old.ts
                    // also deleteToken (combine into a single mutation, with an optional token argument)
                }
                WRITE mutation.update-user.ts {
                    // from old.ts
                }
                WRITE mutation.complete-registration.ts {
                    // from old.ts
                    // TODO rename registration to signup
                }
                WRITE mutation.rename-session.ts {
                    // from old.ts
                    // TODO third party apps also have tokens, a "Session" type should be created
                    // so that third party apps' sessions (authorizations) can also be revoked
                }
                WRITE mutation.delete-user.ts {
                    // TODO
                }
                WRITE mutation.accept-registration.ts {
                    // from old.ts
                    // TODO rename registration to user-candidate
                }
            }
        }
        health-checks {
            PUT src/services/healthcheck.ts AS old.ts

            WRITE README.md {
                Health Checks
                =============

                Représente les différents "health checks" de l'application.
                Les health checks sont des tests permettant de vérifier que l'application fonctionne correctement.
                Ils sont utilisés pour monitorer que l'application est en bonne santé, et permet aussi d'exposer un endpoint /health dans l'application web.
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE health-check.ts {
                    // from old.ts
                }
            }

            resolvers {
                WRITE query.health-check.ts {
                    // from old.ts
                }
            }
        }
        documents {
            WRITE README.md {
                Documents (La Frappe)
                =========

                Représente les différents documents publiés dans des [matières](../curriculum).

                Nommé "La Frappe" au sein des écoles de Toulouse INP.
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE document.ts {
                    // from old.ts
                }
            }

            resolvers {
                WRITE query.document.ts {
                    // from old.ts
                }
                WRITE query.documents.ts {
                    // from old.ts
                }
                WRITE query.search-documents.ts {
                    // from old.ts maybe?
                }
                WRITE mutation.upsert-document.ts {
                    // from old.ts
                }
                WRITE mutation.upload-document-file.ts {
                    // from old.ts
                }
                WRITE mutation.delete-document.ts {
                    // from old.ts
                }
                WRITE subject.documents.ts {
                    // TODO
                }
            }
        }
        events {
            PUT src/objects/events.ts AS old.ts

            WRITE README.md {
                Évènements
                ======

                Les différents évènements organisés par des [groupes](../groups).

                Un évènement peut, ou non, avoir des billets (et donc un système de billetterie).

                Voir [Billetterie](../ticketing) pour tout ce qui est billest et réservations.
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE event.ts {
                    // from old.ts
                }

                PUT src/objects/event-managers.ts AS old-event-managers.ts

                WRITE event-manager.ts {
                    // from ./old-event-managers.ts
                }
            }

            resolvers {
                WRITE query.event.ts {
                    // from old.ts
                }

                WRITE query.events.ts {
                    // from old.ts
                }

                WRITE query.events-in-week.ts {
                    // from old.ts
                    // TODO rework to events-in-range, and merge with events
                }

                WRITE query.search-events.ts {
                    // from old.ts maybe?
                }

                WRITE mutation.upsert-event.ts {
                    // from old.ts
                }

                WRITE mutation.delete-event.ts {
                    // from old.ts
                }

                WRITE mutation.upsert-event-manager.ts {
                    // from old.ts
                }

                WRITE mutation.delete-event-manager.ts {
                    // from old.ts
                }

                WRITE group.events.ts {
                    // TODO
                }

                WRITE event.managers.ts {
                    // TODO
                }
            }
        }
        groups {
            PUT src/objects/groups.ts AS old.ts

            WRITE README.md {
                Groupes
                =======

                Représente les différents groupes de l'application.

                Un groupe peut être un club, une association, un bureau d'[AE](../student-associations), un groupe d'intégration ou un simple groupe (parfois dit "groupe informel").
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE group.ts {
                    // from old.ts
                }
                
                PUT src/object/group-members.ts AS old-group-members.ts

                WRITE group-members {
                    // from ./old-group-members.ts
                    // TODO maybe rename membership ? 
                }
            }

            resolvers {
                WRITE query.group.ts {
                    // from old.ts
                }

                WRITE query.groups.ts {
                    // from old.ts
                }

                WRITE query.search-groups.ts {
                    // from old.ts
                }

                WRITE mutation.upsert-group.ts {
                    // from old.ts
                }

                WRITE mutation.upsert-group-picture.ts {
                    // from old.ts
                }

                WRITE mutation.delete-group.ts {
                    // TODO
                }

                WRITE mutation.delete-group-picture.ts {
                    // from old.ts
                }

                WRITE mutation.upsert-group-member.ts {
                    // from old.ts
                }

                WRITE mutation.delete-group-member.ts {
                    // from old.ts
                }

                WRITE mutation.self-join-group.ts {
                    // from old.ts
                }

                WRITE mutation.update-room-open-state.ts {
                    // from old.ts
                    // TODO rename to update-group-room-open-state
                }

                WRITE user.groups.ts {
                    // from users's type
                    // TODO rename to memberships
                }

                WRITE group.members.ts {
                    // from type
                }

                WRITE query.group-members-csv {
                    // from old.ts
                    // TODO rename to group.members-csv
                }
            }
        }
        gitlab {
            PUT src/services/gitlab.ts AS old.ts

            WRITE README.md {
                Gitlab
                ======

                Churros est interconnecté avec son dépôt pour tout ce qui concerne:
                
                - la gestion de rapports utilisateurs (signalement de bugs et propositions de fonctionnalités).
                - l'affichage de crédits et le badge "développeur·euse" sur les profils (développeur·euse·s ayant fait des commits)
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE issue.ts {
                    // from old.ts
                }

                WRITE issue-comment.ts {
                    // from old.ts
                }
            }

            resolvers {
                WRITE query.issue.ts {
                    // from old.ts
                }

                WRITE query.issues-by-user.ts {
                    // from old.ts
                    // TODO rename to user.submitted-issues
                }

                WRITE mutation.create-gitlab-issue.ts {
                    // from old.ts
                    // TODO rename to submit-issue
                }

                WRITE issue.comments.ts {
                    // from old.ts
                }
            }
        }
        links {
            PUT src/objects/links.ts AS old.ts

            WRITE README.md {
                Liens
                =====

                Représente des liens nommés, utilisés dans beaucoup de ressources différentes.

                Code
                ----

                Le code des résolveurs respectifs sont dans chacun des modules concernés, et non ici.
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE link.ts {
                    // from old.ts
                }
            }

            resolvers {
                # empty
            }
        }
        logs {
            PUT src/services/logs.ts AS old.ts

            WRITE README.md {
                Logs
                ====

                Représente les logs de l'application, accessible uniquement par les administrateur·ice·s.
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE log.ts {
                    // from old.ts
                }
            }

            resolvers {
                WRITE query.logs.ts {
                    // from old.ts
                }
            }
        }
        # subjects, majors, minors, teaching units
        curriculum  {
            PUT src/objects/subjects.ts AS old-subjects.ts
            PUT src/objects/majors.ts AS old-majors.ts
            PUT src/objects/minors.ts AS old-minors.ts
            PUT src/objects/teaching-units.ts AS old-teaching-units.ts

            WRITE README.md {
                Curriculum
                ==========

                Représente les différentes matières enseignées dans les écoles, et leur organisation au sein de celle-ci.

                La hiérarchie est la suivante:

                - [École](../schools)
                  - Filière (ou majeure): objet `Major`
                    - Parcours (ou mineure): objet `Minor`
                      - "UE" (Unité d'enseignement): objet `TeachingUnit`
                        - Matière: objet `Subject`
                
                Cependant, afin de rendre les différents cas particuliers des écoles représentables, cette représentation se doit d'être la plus flexible possible.

                En conséquence, une matière peut être reliée à:

                - une UE
                - une mineure
                - une majeure

                Et de même, une UE peut être reliée à:

                - une mineure
                - une majeure

                La hiérarchie complète est donc plutôt la suivante:

                ```
                School
                    Major
                        Subject
                        TeachingUnit
                        Minor
                            Subject
                            TeachingUnit
                                Subject
                ```
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE subject.ts {
                    // from ./old-subjects.ts
                }

                WRITE major.ts {
                    // from ./old-majors.ts
                }

                WRITE minor.ts {
                    // from ./old-minors.ts
                }

                WRITE teaching-unit.ts {
                    // from ./old-teaching-units.ts
                }
            }

            resolvers {
                WRITE query.subjects.ts {
                    // from ./old-subjects.ts
                }

                WRITE query.subjects-of-minor.ts {
                    // from ./old-subjects.ts
                    // TODO rename to minor.subjects
                }

                WRITE query.subjects-of-major.ts {
                    // from ./old-subjects.ts
                    // TODO rename to major.subjects
                }

                WRITE query.majors.ts {
                    // from ./old-majors.ts
                }

                WRITE query.minors.ts {
                    // from ./old-minors.ts
                }

                WRITE query.minors-of-major.ts {
                    // from ./old-minors.ts
                    // TODO rename to major.minors
                }

                WRITE major.teaching-units.ts {
                    // from ./old-majors.ts
                }

                WRITE minor.teaching-units.ts {
                    // from ./old-minors.ts
                }
            }
        }
        # tickets, bookings, qrcode type, bookings, registration verifications, profits breakdown etc
        ticketing {
            PUT src/objects/tickets.ts AS old-ticket.ts
            PUT src/objects/registrations.ts AS old-registrations.ts
            PUT src/objects/ticket-groups.ts AS old-ticket-groups.ts

            WRITE README.md {
                Billetterie
                ===========

                Représente les différents billets et réservations de l'application.
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE ticket.ts {
                    // from ./old-ticket.ts
                }

                WRITE registration.ts {
                    // from ./old-registrations.ts
                    // TODO rename to booking
                }

                WRITE ticket-group.ts {
                    // from ./old-ticket-groups.ts
                }
            }

            resolvers {
                WRITE query.registration.ts {
                    // from ./old-registrations.ts
                    // TODO rename to booking
                }

                WRITE query.registration-of-user.ts {
                    // from ./old-registrations.ts
                    // TODO rename to user.booking
                }

                WRITE query.registrations-of-user.ts {
                    // from ./old-registrations.ts
                    // TODO rename to user.bookings
                }

                WRITE query.registrations-of-event.ts {
                    // from ./old-registrations.ts
                    // TODO rename to event.bookings
                }

                WRITE query.registrations-of-user-for-event.ts {
                    // from ./old-registrations.ts
                    // TODO rename to user.bookings-for-event; and also create a query event.bookings-of-user
                    // maybe there's a better way to do this kind of "triple coupling", idk.
                    // sth like user.(sth like "participant-of", user.events could be amibiguous with user.managed-events).bookings
                }

                WRITE query.search-registrations.ts {
                    // from ./old-registrations.ts
                    // TODO rename to event.search-bookings
                }

                WRITE mutation.verify-registration.ts {
                    // from ./old-registrations.ts
                    // TODO rename to verify-booking.ts
                }

                WRITE mutation.upsert-registration.ts {
                    // from ./old-registrations.ts
                    // TODO rename to book.ts
                }

                WRITE mutation.paid-registration.ts {
                    // from ./old-registrations.ts
                    // TODO rename to pay-booking.ts
                }

                WRITE mutation.finish-paypal-registration-payment.ts {
                    // from ./old-registrations.ts
                    // TODO rename to finish-paypal-booking-payment.ts
                }

                WRITE mutation.cancel-registration.ts {
                    // from ./old-registrations.ts
                    // TODO rename to cancel-booking.ts
                }

                WRITE mutation.oppose-registration.ts {
                    // from ./old-registrations.ts
                    // TODO rename to oppose-booking.ts
                }

                WRITE query.registration-qr-code.ts {
                    // from ./old-registrations.ts
                    // TODO rename to booking.qr-code
                }

                WRITE query.registrations-csv.ts {
                    // from ./old-registrations.ts
                    // TODO rename to event.bookings-csv
                }

                WRITE query.ticket.ts {
                    // from ./old-ticket.ts
                }

                WRITE query.ticket-by-uid.ts {
                    // from ./old-ticket.ts
                    // TODO merge into query.ticket
                }

                WRITE query.tickets-of-event.ts {
                    // from ./old-ticket.ts
                    // TODO rename to event.tickets
                }

                WRITE mutation.delete-ticket.ts {
                    // from ./old-ticket.ts
                }

                WRITE query.ticket-group.ts {
                    // from ./old-ticket-groups.ts
                    // TODO rename to event.ticket-group
                }

                WRITE mutation.upsert-ticket-group.ts {
                    // from ./old-ticket-groups.ts
                }

                WRITE mutation.delete-ticket-group.ts {
                    // from ./old-ticket-groups.ts
                }
            }

            permissions {
                WRITE registration.ts {
                    // from ./old-registrations.ts
                    // TODO rename to booking
                    export const userCanBookTicket = (user: User, ticket: Ticket) =>
                        /* TODO */ undefined
                }
            }
        }
        # everything related to third party apps (oauth clients)
        oauth {
            PUT src/objects/oauth.ts AS old.ts

            WRITE README.md {
                Applications tierces (OAuth)
                ============================

                Churros fourni un service de provider OAuth.

                Des applications tierces peuvent utiliser l'API de Churros au nom d'une personne, si celle-ci autorise l'application.
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE third-party-app.ts {
                    // from ./old.ts
                }

                WRITE errors.ts {
                    // from ./old.ts : OAuth2Error{,Code}
                }
            }

            resolvers {
                WRITE query.third-party-app.ts {
                    // from ./old.ts
                }

                WRITE query.my-apps.ts {
                    // from ./old.ts
                    // TODO rename to my-third-party-apps
                }

                WRITE query.all-apps.ts {
                    // from ./old.ts
                    // TODO rename to all-third-party-apps
                }

                WRITE mutation.register-app.ts {
                    // from ./old.ts
                    // TODO rename register-third-party-app
                }

                WRITE mutation.rotate-app-secret.ts {
                    // from ./old.ts
                    // TODO rename rotate-app-client-secret
                }

                WRITE mutation.activate-app.ts {
                    // from ./old.ts
                    // TODO rename activate-third-party-app
                }

                WRITE mutation.deactivate-app.ts {
                    // from ./old.ts
                    // TODO rename deactivate-third-party-app
                }

                WRITE mutation.edit-app.ts {
                    // from ./old.ts
                    // TODO rename update-third-party-app
                }
            }
            
            utils {
                WRITE tokens.ts {
                    // from auth.ts:isThirdPartyToken
                }
            }
        }
        reactions {
            PUT src/objects/reactions.ts AS old.ts

            WRITE README.md {
                Réactions
                =========

                Représente les différentes réactions (likes, etc) sur les différents objets de l'application (évènements, posts, etc)
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE reaction-counts.ts {
                    // from CountsScalar in objects/scalars.ts
                }

                WRITE users-reactions.ts {
                    // from BooleanMapScalar in objects/scalars.ts
                }
            }

            resolvers {
                WRITE query.reactions.ts{
                    // from old.ts
                    // TODO split into event.reactions, post.reactions, etc
                }

                WRITE query.reaction.ts {
                    // from old.ts
                    // TODO split into event.reaction, post.reaction, etc
                    // or remove it maybe
                }

                WRITE event.reaction-counts.ts {
                    // from event's type
                }

                WRITE post.reaction-counts.ts {
                    // from post's type
                }

                WRITE event.my-reactions.ts {
                    // from old.ts
                }

                WRITE post.my-reactions.ts {
                    // from old.ts
                }

                WRITE mutation.upsert-reaction.ts {
                    // from old.ts
                    // TODO rename to mutation.react and mutation.remove-reaction (or mutation.unreact ?)
                }
            }
        }
        # external services
        services {
            PUT src/objects/services.ts AS old.ts

            WRITE README.md {
                Services
                ========

                Représente les différents services externes proposés par une [AE](../student-associations), une [école](../schools) ou un [groupe](../groups).
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE service.ts {
                    // from old.ts
                }
            }

            resolvers {
                WRITE query.service.ts {
                    // from old.ts
                }

                WRITE query.services.ts {
                    // from old.ts
                    // TODO split into  group.services, student-association.services, school.services and query.all-services for admins
                }

                WRITE mutation.upsert-service.ts {
                    // from old.ts
                }

                WRITE mutation.delete-service.ts {
                    // from old.ts
                }

                WRITE query.user-services.ts {
                    // TODO rename to user.services (services available to a user)
                }
            }
        }
        student-associations {
            PUT src/objects/student-associations.ts AS old.ts

            WRITE README.md {
                Associations étudiantes
                =======================

                Représente les différentes associations étudiantes des écoles.
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE student-association.ts {
                    // from old.ts
                }
            }

            resolvers {
                WRITE query.student-association.ts {
                    // from old.ts
                }

                WRITE query.student-associations.ts {
                    // from old.ts
                    // TODO split into user.student-associations, school.student-associations, and query.all-student-associations for admins
                }

                WRITE mutation.contribute.ts {
                    // from old.ts
                }

                WRITE mutation.cancel-pending-contribution.ts {
                    // from old.ts
                }
            }
        }
        schools {
            PUT src/objects/schools.ts AS old.ts

            WRITE README.md {
                Écoles
                ======

                Représente les différentes écoles.
            }

            WRITE index.ts {
                // Barrel file
            }

            types {
                WRITE school.ts {
                    // from old.ts
                }
            }

            resolvers {
                WRITE query.school.ts {
                    // from old.ts
                }

                WRITE query.schools.ts {
                    // from old.ts
                }

                WRITE user.schools.ts {
                    // TODO 
                }

                WRITE query.school-groups.ts {
                    // TODO remove or rename at least, don't really know what it's supposed to reprensent
                }
            }
        }
    }
}
